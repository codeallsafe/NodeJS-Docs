// ============================
// ğŸ“˜ Async Context Tracking Docs
// Node.js async_hooks modÃ¼lÃ¼ ile
// ============================

const { AsyncLocalStorage, AsyncResource } = require('node:async_hooks');

// =====================================
// AsyncLocalStorage KullanÄ±mÄ±
// =====================================

// Yeni bir AsyncLocalStorage Ã¶rneÄŸi oluÅŸtur
const asyncLocalStorage = new AsyncLocalStorage();

// Bir HTTP sunucusunda her istek iÃ§in benzersiz bir ID baÄŸlamak
const http = require('node:http');
let id = 0;
http.createServer((req, res) => {
  asyncLocalStorage.run(id++, () => {
    logWithId('Request started');
    setTimeout(() => {
      logWithId('Request finished');
      res.end();
    }, 50);
  });
}).listen(8080);

function logWithId(msg) {
  const context = asyncLocalStorage.getStore();
  console.log(`${context !== undefined ? context : '-'}: ${msg}`);
}

// =====================================
// asyncLocalStorage.run(store, callback)
// =====================================
// Bir store objesi ile context baÅŸlatÄ±lÄ±r, ardÄ±ndan gelen async iÅŸlemler bu store'a eriÅŸebilir
asyncLocalStorage.run({ userId: 123 }, () => {
  console.log(asyncLocalStorage.getStore()); // { userId: 123 }
});

// =====================================
// asyncLocalStorage.enterWith(store)
// =====================================
// Sadece mevcut senkron execution context'inde store ayarlar.
// Tercihen run() kullanÄ±lmalÄ±dÄ±r.
const store = { traceId: 'abc123' };
asyncLocalStorage.enterWith(store);
console.log(asyncLocalStorage.getStore()); // { traceId: 'abc123' }

// =====================================
// asyncLocalStorage.getStore()
// =====================================
// Mevcut context'e ait veriyi dÃ¶ner, context yoksa undefined

// =====================================
// asyncLocalStorage.disable()
// =====================================
// TÃ¼m context'leri devre dÄ±ÅŸÄ± bÄ±rakÄ±r. Bellekten toplanmasÄ± iÃ§in kullanÄ±labilir.
asyncLocalStorage.disable();

// =====================================
// asyncLocalStorage.exit(callback)
// =====================================
// Verilen callback'i context dÄ±ÅŸÄ±nda Ã§alÄ±ÅŸtÄ±rÄ±r.
asyncLocalStorage.run({ value: 10 }, () => {
  asyncLocalStorage.exit(() => {
    console.log(asyncLocalStorage.getStore()); // undefined
  });
});

// =====================================
// asyncLocalStorage.bind(fn)
// =====================================
// Verilen fonksiyonu mevcut context'e baÄŸlar
const boundFn = AsyncLocalStorage.bind(() => {
  console.log(asyncLocalStorage.getStore());
});
asyncLocalStorage.run('boundTest', boundFn);

// =====================================
// asyncLocalStorage.snapshot()
// =====================================
// O anki context'i yakalayarak baÅŸka yerde Ã§alÄ±ÅŸtÄ±rmak iÃ§in fonksiyon dÃ¶ner
const runInContext = asyncLocalStorage.run('snapshotID', () => AsyncLocalStorage.snapshot());
const result = asyncLocalStorage.run('otherContext', () => runInContext(() => asyncLocalStorage.getStore()));
console.log(result); // snapshotID

// =====================================
// Class: AsyncResource
// =====================================

// Ã–zel async iÅŸlemlerimizi takip edebilmek iÃ§in AsyncResource kullanÄ±lÄ±r
class DBQuery extends AsyncResource {
  constructor(db) {
    super('DBQuery');
    this.db = db;
  }

  get(query, callback) {
    this.db.get(query, (err, data) => {
      this.runInAsyncScope(callback, null, err, data);
    });
  }

  close() {
    this.emitDestroy(); // Manuel destroy edilmesi gerekir
  }
}

// =====================================
// asyncResource.runInAsyncScope(fn, thisArg, ...args)
// =====================================
// Fonksiyonu kendi async context'inde Ã§alÄ±ÅŸtÄ±rÄ±r

// =====================================
// asyncResource.bind(fn)
// =====================================
// Fonksiyonu bu resource'un context'ine baÄŸlar

// =====================================
// asyncResource.asyncId() ve triggerAsyncId()
// =====================================
// asyncId: Bu resource'a atanmÄ±ÅŸ ID
// triggerAsyncId: Resourceâ€™u tetikleyen contextâ€™in IDâ€™si

// =====================================
// Worker Pool Ã–rneÄŸi (Ã–zet YapÄ±)
// =====================================

// AsyncResource, worker havuzlarÄ± gibi dÄ±ÅŸ kaynaklar iÃ§in context korumasÄ± saÄŸlar
// Worker havuzu yapÄ±larÄ±nda callback'lerin doÄŸru async context ile baÄŸlanmasÄ±nÄ± saÄŸlar

// =====================================
// EventEmitter ile KullanÄ±m
// =====================================

// EventEmitter iÃ§indeki listener'lar doÄŸru async context'te Ã§alÄ±ÅŸmayabilir
// Bunun iÃ§in AsyncResource.bind() ile baÄŸlamak gerekir
const { createServer } = require('node:http');

createServer((req, res) => {
  req.on('close', AsyncResource.bind(() => {
    console.log('BaÄŸlÄ± context iÃ§inde');
  }));

  req.on('close', () => {
    console.log('Normal context');
  });
  res.end();
}).listen(3000);

// =====================
// SON
// =====================
// Bu dosya, node:async_hooks modÃ¼lÃ¼nÃ¼n
// tÃ¼m fonksiyonlarÄ±nÄ± aÃ§Ä±klamalÄ± olarak iÃ§ermektedir.
// EÄŸitim ve test ortamlarÄ± iÃ§in referans dÃ¶kÃ¼man niteliÄŸindedir.
